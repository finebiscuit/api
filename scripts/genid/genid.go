package main

import (
	"flag"
	"html/template"
	"log"
	"os"
)

func main() {
	pkgFlag := flag.String("pkg", "", "")
	flag.Parse()

	f, err := os.Create("id_gen.go")
	if err != nil {
		log.Fatal(err)
	}

	if pkgFlag == nil {
		log.Fatal("no pkg flag")
	}

	tpl.Execute(f, struct {
		PkgName string
	}{
		PkgName: *pkgFlag,
	})
}

var tpl = template.Must(template.New("").Parse(`// Code generated by go generate; DO NOT EDIT.
package {{ .PkgName }}

import (
	"database/sql/driver"

	"github.com/rs/xid"
)

type ID xid.ID

var NoID = ID{}

func (id ID) String() string {
	return xid.ID(id).String()
}

func (id ID) Value() (driver.Value, error) {
	return xid.ID(id).Value()
}

func (id *ID) Scan(value interface{}) error {
	x := xid.ID{}
	if err := x.Scan(value); err != nil {
		return err
	}
	*id = ID(x)
	return nil
}

func (id ID) Valid() bool {
	return id != NoID
}

func ParseID(s string) ID {
	id, err := xid.FromString(s)
	if err != nil {
		return NoID
	}
	return ID(id)
}

func newID() ID {
	return ID(xid.New())
}
`))
