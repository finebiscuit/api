type Balance {
    id: ID!
    currency: Currency!
    kind: String!

    displayName: String
    officialName: String
    institution: String

    estimatedMonthlyGrowthRate: Decimal
    estimatedMonthlyValueChange: Decimal

    allCurrentValues: [BalanceValue!]! @goField(forceResolver: true)
    currentValue(currency: Currency!): BalanceValue

    historicalValues(currency: Currency!): [BalanceValue!]
}

type BalanceValue {
    currency: Currency!
    value: Decimal!
    validAt: Time!
    year: Int!
    month: Int!
}

extend type Query {
    balances: [Balance!]
}

input CreateBalanceInput {
    currency: Currency!
    kind: String!
    value: Decimal!
    displayName: String
    officialName: String
    institution: String
    estimatedMonthlyGrowthRate: Decimal
    estimatedMonthlyValueChange: Decimal
}

input UpdateBalanceInfoInput {
    balanceId: ID!
    displayName: String
    officialName: String
    institution: String
    estimatedMonthlyGrowthRate: Decimal
    estimatedMonthlyValueChange: Decimal
}

input UpdateBalanceValueInput {
    balanceId: ID!
    value: String!
}

type BalancePayload {
    balance: Balance
}

extend type Mutation {
    createBalance(params: CreateBalanceInput!): BalancePayload
    removeBalance(balanceId: ID!): BalancePayload
    updateBalanceInfo(params: UpdateBalanceInfoInput!): BalancePayload
    updateBalanceValue(params: UpdateBalanceValueInput!): BalancePayload
}

