// Code generated by "enumer -type=Type -output=type_gen.go -gqlgen -sql"; DO NOT EDIT.

package balance

import (
	"database/sql/driver"
	"fmt"
	"io"
	"strconv"
	"strings"
)

const _TypeName = "NoTypeCashCashCheckingCashSavingCashPhysicalCashDigitalCashOtherInvestmentInvestmentBrokerageInvestmentRetirementInvestmentHealthInvestmentEducationInvestmentOtherRealEstateRealEstatePrimaryRealEstateInvestmentRealEstateVacationRealEstateCommercialRealEstateLandRealEstateOtherVehicleVehicleAutomobileVehicleBoatVehiclePlaneVehicleOtherPropertyPropertyFurniturePropertyJewelleryPropertyCollectiblePropertyElectronicsPropertyOtherCryptocurrencyOther"

var _TypeIndex = [...]uint16{0, 6, 10, 22, 32, 44, 55, 64, 74, 93, 113, 129, 148, 163, 173, 190, 210, 228, 248, 262, 277, 284, 301, 312, 324, 336, 344, 361, 378, 397, 416, 429, 443, 448}

const _TypeLowerName = "notypecashcashcheckingcashsavingcashphysicalcashdigitalcashotherinvestmentinvestmentbrokerageinvestmentretirementinvestmenthealthinvestmenteducationinvestmentotherrealestaterealestateprimaryrealestateinvestmentrealestatevacationrealestatecommercialrealestatelandrealestateothervehiclevehicleautomobilevehicleboatvehicleplanevehicleotherpropertypropertyfurniturepropertyjewellerypropertycollectiblepropertyelectronicspropertyothercryptocurrencyother"

func (i Type) String() string {
	if i >= Type(len(_TypeIndex)-1) {
		return fmt.Sprintf("Type(%d)", i)
	}
	return _TypeName[_TypeIndex[i]:_TypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _TypeNoOp() {
	var x [1]struct{}
	_ = x[NoType-(0)]
	_ = x[Cash-(1)]
	_ = x[CashChecking-(2)]
	_ = x[CashSaving-(3)]
	_ = x[CashPhysical-(4)]
	_ = x[CashDigital-(5)]
	_ = x[CashOther-(6)]
	_ = x[Investment-(7)]
	_ = x[InvestmentBrokerage-(8)]
	_ = x[InvestmentRetirement-(9)]
	_ = x[InvestmentHealth-(10)]
	_ = x[InvestmentEducation-(11)]
	_ = x[InvestmentOther-(12)]
	_ = x[RealEstate-(13)]
	_ = x[RealEstatePrimary-(14)]
	_ = x[RealEstateInvestment-(15)]
	_ = x[RealEstateVacation-(16)]
	_ = x[RealEstateCommercial-(17)]
	_ = x[RealEstateLand-(18)]
	_ = x[RealEstateOther-(19)]
	_ = x[Vehicle-(20)]
	_ = x[VehicleAutomobile-(21)]
	_ = x[VehicleBoat-(22)]
	_ = x[VehiclePlane-(23)]
	_ = x[VehicleOther-(24)]
	_ = x[Property-(25)]
	_ = x[PropertyFurniture-(26)]
	_ = x[PropertyJewellery-(27)]
	_ = x[PropertyCollectible-(28)]
	_ = x[PropertyElectronics-(29)]
	_ = x[PropertyOther-(30)]
	_ = x[Cryptocurrency-(31)]
	_ = x[Other-(32)]
}

var _TypeValues = []Type{NoType, Cash, CashChecking, CashSaving, CashPhysical, CashDigital, CashOther, Investment, InvestmentBrokerage, InvestmentRetirement, InvestmentHealth, InvestmentEducation, InvestmentOther, RealEstate, RealEstatePrimary, RealEstateInvestment, RealEstateVacation, RealEstateCommercial, RealEstateLand, RealEstateOther, Vehicle, VehicleAutomobile, VehicleBoat, VehiclePlane, VehicleOther, Property, PropertyFurniture, PropertyJewellery, PropertyCollectible, PropertyElectronics, PropertyOther, Cryptocurrency, Other}

var _TypeNameToValueMap = map[string]Type{
	_TypeName[0:6]:          NoType,
	_TypeLowerName[0:6]:     NoType,
	_TypeName[6:10]:         Cash,
	_TypeLowerName[6:10]:    Cash,
	_TypeName[10:22]:        CashChecking,
	_TypeLowerName[10:22]:   CashChecking,
	_TypeName[22:32]:        CashSaving,
	_TypeLowerName[22:32]:   CashSaving,
	_TypeName[32:44]:        CashPhysical,
	_TypeLowerName[32:44]:   CashPhysical,
	_TypeName[44:55]:        CashDigital,
	_TypeLowerName[44:55]:   CashDigital,
	_TypeName[55:64]:        CashOther,
	_TypeLowerName[55:64]:   CashOther,
	_TypeName[64:74]:        Investment,
	_TypeLowerName[64:74]:   Investment,
	_TypeName[74:93]:        InvestmentBrokerage,
	_TypeLowerName[74:93]:   InvestmentBrokerage,
	_TypeName[93:113]:       InvestmentRetirement,
	_TypeLowerName[93:113]:  InvestmentRetirement,
	_TypeName[113:129]:      InvestmentHealth,
	_TypeLowerName[113:129]: InvestmentHealth,
	_TypeName[129:148]:      InvestmentEducation,
	_TypeLowerName[129:148]: InvestmentEducation,
	_TypeName[148:163]:      InvestmentOther,
	_TypeLowerName[148:163]: InvestmentOther,
	_TypeName[163:173]:      RealEstate,
	_TypeLowerName[163:173]: RealEstate,
	_TypeName[173:190]:      RealEstatePrimary,
	_TypeLowerName[173:190]: RealEstatePrimary,
	_TypeName[190:210]:      RealEstateInvestment,
	_TypeLowerName[190:210]: RealEstateInvestment,
	_TypeName[210:228]:      RealEstateVacation,
	_TypeLowerName[210:228]: RealEstateVacation,
	_TypeName[228:248]:      RealEstateCommercial,
	_TypeLowerName[228:248]: RealEstateCommercial,
	_TypeName[248:262]:      RealEstateLand,
	_TypeLowerName[248:262]: RealEstateLand,
	_TypeName[262:277]:      RealEstateOther,
	_TypeLowerName[262:277]: RealEstateOther,
	_TypeName[277:284]:      Vehicle,
	_TypeLowerName[277:284]: Vehicle,
	_TypeName[284:301]:      VehicleAutomobile,
	_TypeLowerName[284:301]: VehicleAutomobile,
	_TypeName[301:312]:      VehicleBoat,
	_TypeLowerName[301:312]: VehicleBoat,
	_TypeName[312:324]:      VehiclePlane,
	_TypeLowerName[312:324]: VehiclePlane,
	_TypeName[324:336]:      VehicleOther,
	_TypeLowerName[324:336]: VehicleOther,
	_TypeName[336:344]:      Property,
	_TypeLowerName[336:344]: Property,
	_TypeName[344:361]:      PropertyFurniture,
	_TypeLowerName[344:361]: PropertyFurniture,
	_TypeName[361:378]:      PropertyJewellery,
	_TypeLowerName[361:378]: PropertyJewellery,
	_TypeName[378:397]:      PropertyCollectible,
	_TypeLowerName[378:397]: PropertyCollectible,
	_TypeName[397:416]:      PropertyElectronics,
	_TypeLowerName[397:416]: PropertyElectronics,
	_TypeName[416:429]:      PropertyOther,
	_TypeLowerName[416:429]: PropertyOther,
	_TypeName[429:443]:      Cryptocurrency,
	_TypeLowerName[429:443]: Cryptocurrency,
	_TypeName[443:448]:      Other,
	_TypeLowerName[443:448]: Other,
}

var _TypeNames = []string{
	_TypeName[0:6],
	_TypeName[6:10],
	_TypeName[10:22],
	_TypeName[22:32],
	_TypeName[32:44],
	_TypeName[44:55],
	_TypeName[55:64],
	_TypeName[64:74],
	_TypeName[74:93],
	_TypeName[93:113],
	_TypeName[113:129],
	_TypeName[129:148],
	_TypeName[148:163],
	_TypeName[163:173],
	_TypeName[173:190],
	_TypeName[190:210],
	_TypeName[210:228],
	_TypeName[228:248],
	_TypeName[248:262],
	_TypeName[262:277],
	_TypeName[277:284],
	_TypeName[284:301],
	_TypeName[301:312],
	_TypeName[312:324],
	_TypeName[324:336],
	_TypeName[336:344],
	_TypeName[344:361],
	_TypeName[361:378],
	_TypeName[378:397],
	_TypeName[397:416],
	_TypeName[416:429],
	_TypeName[429:443],
	_TypeName[443:448],
}

// TypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func TypeString(s string) (Type, error) {
	if val, ok := _TypeNameToValueMap[s]; ok {
		return val, nil
	}
	s = strings.ToLower(s)
	if val, ok := _TypeNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Type values", s)
}

// TypeValues returns all values of the enum
func TypeValues() []Type {
	return _TypeValues
}

// TypeStrings returns a slice of all String values of the enum
func TypeStrings() []string {
	strs := make([]string, len(_TypeNames))
	copy(strs, _TypeNames)
	return strs
}

// IsAType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Type) IsAType() bool {
	for _, v := range _TypeValues {
		if i == v {
			return true
		}
	}
	return false
}

func (i Type) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *Type) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of Type: %[1]T(%[1]v)", value)
	}

	val, err := TypeString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}

// MarshalGQL implements the graphql.Marshaler interface for Type
func (i Type) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(i.String()))
}

// UnmarshalGQL implements the graphql.Unmarshaler interface for Type
func (i *Type) UnmarshalGQL(value interface{}) error {
	str, ok := value.(string)
	if !ok {
		return fmt.Errorf("Type should be a string, got %T", value)
	}

	var err error
	*i, err = TypeString(str)
	return err
}
