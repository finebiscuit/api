// Code generated by "enumer -type=Key -output=key_gen.go -sql"; DO NOT EDIT.

package prefs

import (
	"database/sql/driver"
	"fmt"
	"strings"
)

const _KeyName = "DefaultCurrencySupportedCurrencies"

var _KeyIndex = [...]uint8{0, 15, 34}

const _KeyLowerName = "defaultcurrencysupportedcurrencies"

func (i Key) String() string {
	if i >= Key(len(_KeyIndex)-1) {
		return fmt.Sprintf("Key(%d)", i)
	}
	return _KeyName[_KeyIndex[i]:_KeyIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _KeyNoOp() {
	var x [1]struct{}
	_ = x[DefaultCurrency-(0)]
	_ = x[SupportedCurrencies-(1)]
}

var _KeyValues = []Key{DefaultCurrency, SupportedCurrencies}

var _KeyNameToValueMap = map[string]Key{
	_KeyName[0:15]:       DefaultCurrency,
	_KeyLowerName[0:15]:  DefaultCurrency,
	_KeyName[15:34]:      SupportedCurrencies,
	_KeyLowerName[15:34]: SupportedCurrencies,
}

var _KeyNames = []string{
	_KeyName[0:15],
	_KeyName[15:34],
}

// KeyString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func KeyString(s string) (Key, error) {
	if val, ok := _KeyNameToValueMap[s]; ok {
		return val, nil
	}
	s = strings.ToLower(s)
	if val, ok := _KeyNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Key values", s)
}

// KeyValues returns all values of the enum
func KeyValues() []Key {
	return _KeyValues
}

// KeyStrings returns a slice of all String values of the enum
func KeyStrings() []string {
	strs := make([]string, len(_KeyNames))
	copy(strs, _KeyNames)
	return strs
}

// IsAKey returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Key) IsAKey() bool {
	for _, v := range _KeyValues {
		if i == v {
			return true
		}
	}
	return false
}

func (i Key) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *Key) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of Key: %[1]T(%[1]v)", value)
	}

	val, err := KeyString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
